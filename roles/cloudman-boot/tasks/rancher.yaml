- name: Decide on password
  set_fact:
    rancher_password: "{{ random_pwd }}"
    using_random_pwd: true
  when: rancher_password == ''

- debug:
    msg: "Using rancher pwd {{ rancher_password }}"
    verbosity: 2

- name: Create rancher namespace
  command: >
    /usr/local/bin/kubectl create namespace cattle-system
  ignore_errors: true

- debug: msg="Using rancher_server address {{ rancher_server }}"

- name: Helm install Rancher
  command: >
    /usr/local/bin/helm upgrade --install rancher rancher-stable/rancher
    --namespace cattle-system
    --version {{ rancher_version }}
    --set hostname={%- if (rancher_server | ipaddr) %}{{ rancher_server }}.xip.io{%- else  %}{{ rancher_server }}{%- endif %}
    --set ingress.tls.source=rancher

- name: Setup login
  uri:
    url: "https://{{ rancher_server }}.xip.io/v3-public/localProviders/local?action=login"
    method: POST
    body_format: json
    body:
      username: admin
      password: admin
    validate_certs: no
    status_code: 201
    return_content: yes
  ignore_errors: yes
  register: login_response
  until: login_response['status'] | default(0) == 201
  retries: 5
  delay: 10

- name: Set current admin password
  set_fact:
    rpwd: admin
    token: "{{ login_response.json.token }}"
  when: login_response is succeeded

- name: Re-setup login
  uri:
    url: "https://{{ rancher_server }}.xip.io/v3-public/localProviders/local?action=login"
    method: POST
    body_format: json
    body:
      username: admin
      password: "{{ rancher_password }}"
    validate_certs: no
    status_code: 201
    return_content: yes
  register: login_response
  when: login_response is failed

- name: Set current admin password
  set_fact:
    rpwd: "{{ rancher_password }}"
    token: "{{ login_response.json.token }}"
  when: rpwd is undefined

- name: Change password
  uri:
    url: "https://{{ rancher_server }}.xip.io/v3/users?action=changepassword"
    method: POST
    body_format: json
    body:
      currentPassword: "{{ rpwd }}"
      newPassword: "{{ rancher_password }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no

- name: Configure server URL
  uri:
    url: "https://{{ rancher_server }}.xip.io/v3/settings/server-url"
    method: PUT
    body_format: json
    body:
      name: server-url
      type: setting
      value: "https://{{ rancher_server }}.xip.io"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no

- name: Fetch existing local k3s cluster
  uri:
    url: "https://{{ rancher_server }}.xip.io/v3/clusters?name={{ cm_cluster_name }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: clusters

- name: Store existing cluster id
  set_fact:
    cluster_id: "{{ clusters.json.data[0].id }}"

- name: Get project info
  uri:
    url: https://{{ rancher_server }}.xip.io/v3/projects?clusterId={{ cluster_id }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: project

- name: Set project id
  set_fact:
    project_id: "{{ project.json.data[0].id }}"
    system_project_id: "{{ project.json.data[1].id }}"

- name: Check if CloudMan namespace already exists
  uri:
    url: https://{{ rancher_server }}.xip.io/v3/cluster/{{ cluster_id }}/namespaces?name={{ cm_namespace_name }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cm_ns

- name: Add CloudMan namespace
  uri:
    url: https://{{ rancher_server }}.xip.io/v3/clusters/{{ cluster_id }}/namespace
    method: POST
    body_format: json
    body:
      name: "{{ cm_namespace_name }}"
      type: namespace
      projectId: "{{ project_id }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201
  when: cm_ns.json.data | length == 0

- name: Add kube-system namespace to the Default project
  uri:
    url: https://{{ rancher_server }}.xip.io/v3/cluster/{{ cluster_id }}/namespaces/kube-system
    method: PUT
    body_format: json
    body:
      baseType: namespace
      id: kube-system
      name: kube-system
      projectId: "{{ project_id }}"
      type: namespace
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
