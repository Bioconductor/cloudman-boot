- name: Create CSI driver namespace
  command: >
    /usr/local/bin/kubectl create namespace csi-drivers
  ignore_errors: true

- name: Install AWS Disk CSI Driver
  command: >
    /usr/local/bin/helm upgrade --install aws-ebs-csi-driver https://github.com/kubernetes-sigs/aws-ebs-csi-driver/releases/download/v0.6.0/helm-chart.tgz
        --namespace csi-drivers
        --set enableVolumeScheduling=true
        --set enableVolumeResizing=true
        --set enableVolumeSnapshot=true
  when: kube_in_tree_provider and kube_cloud_provider == "aws"

- name: Install Azure Disk CSI Driver
  command: >
    /usr/local/bin/helm upgrade --install azuredisk-csi-driver https://github.com/kubernetes-sigs/azuredisk-csi-driver/raw/master/charts/v0.9.0/azuredisk-csi-driver-v0.9.0.tgz
        --namespace csi-drivers
  when: kube_in_tree_provider and kube_cloud_provider == "azure"

- name: Install GCP CSI Driver
  shell: curl -skSL https://raw.githubusercontent.com/kubernetes-sigs/gcp-compute-persistent-disk-csi-driver/master/deploy/kubernetes/deploy-driver.sh | bash --
  when: kube_in_tree_provider and kube_cloud_provider == "gce"

# https://github.com/kubernetes/cloud-provider-openstack/issues/1202
#- name: Install OpenStack CSI Driver
#  command: >
#    /usr/local/bin/helm repo add openstackcsi https://kubernetes.github.io/cloud-provider-openstack
#  when: kube_in_tree_provider and kube_cloud_provider == "openstack"

#- name: Install OpenStack CSI Driver
#  command: >
#    /usr/local/bin/helm upgrade --install cinder-csi galaxyproject/openstack-cinder-csi
#    --namespace kube-system
#  when: kube_in_tree_provider and kube_cloud_provider == "openstack"

- name: Install OpenStack CSI Driver
  shell: kubectl apply -f {{ item }}
  with_items:
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/cinder-csi-plugin/cinder-csi-controllerplugin-rbac.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/cinder-csi-plugin/cinder-csi-nodeplugin-rbac.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/cinder-csi-plugin/cinder-csi-controllerplugin.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/cinder-csi-plugin/cinder-csi-nodeplugin.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/cinder-csi-plugin/csi-cinder-driver.yaml
  when: kube_in_tree_provider and kube_cloud_provider == "openstack"

- name: Fallback to hostpath provisioner when no cloud provider is set
  shell: /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
  when: not kube_cloud_provider

- name: Render ebs storage class template
  template:
    src: ebs_storage_class.j2
    dest: /tmp/ebs_storage_class.yml

- name: Deploy ebs storage class
  shell: /usr/local/bin/kubectl apply -f /tmp/ebs_storage_class.yml

- name: Helm upgrade --install nfs-provisioner
  command: >
    /usr/local/bin/helm upgrade --install nfs-provisioner stable/nfs-server-provisioner
    --namespace csi-drivers
    --version "1.1.1"
    --set persistence.enabled=true
    --set persistence.storageClass="ebs"
    --set persistence.size="{{ cm_initial_storage_size }}"
    --set storageClass.create=true
    --set storageClass.reclaimPolicy="Delete"
    --set storageClass.allowVolumeExpansion=true

- name: Helm install RClone for AWS S3
  command: >
    /usr/local/bin/helm upgrade --install rclone-csi galaxyproject/csi-rclone
    --namespace csi-drivers
    --set storageClass.name="rclone"
    --set params.remote="s3"
    --set params.remotePath="{{ cluster_hostname | replace('.', '-') }}-gvl-data"
    --set params.s3-provider="aws"
    --set params.s3-endpoint="https://s3.{{ cm_initial_cluster_data.cloud_config.target.target_zone.region.region_id }}.amazonaws.com"
    --set params.s3-access-key-id="{{ cm_initial_cluster_data.cloud_config.credentials.aws_access_key }}"
    --set params.s3-secret-access-key="{{ cm_initial_cluster_data.cloud_config.credentials.aws_secret_key }}"
  when: kube_cloud_provider == "aws"
  ignore_errors: true

- name: Helm install RClone for OpenStack Swift
  command: >
    /usr/local/bin/helm upgrade --install rclone-csi galaxyproject/csi-rclone
    --namespace csi-drivers
    --set storageClass.name="rclone"
    --set params.remote="swift"
    --set params.remotePath="{{ cluster_hostname | replace('.', '-') }}-gvl-data"
    --set params.swift-user="{{ cm_initial_cluster_data.cloud_config.credentials.os_username }}"
    --set params.swift-key="{{ cm_initial_cluster_data.cloud_config.credentials.os_password }}"
    --set params.swift-auth="{{ cm_initial_cluster_data.cloud_config.target.target_zone.cloud.auth_url }}"
    --set params.swift-domain="{{ cm_initial_cluster_data.cloud_config.credentials.os_user_domain_name }}"
    --set params.swift-tenant="{{ cm_initial_cluster_data.cloud_config.credentials.os_project_name }}"
    --set params.swift-region="{{ cm_initial_cluster_data.cloud_config.target.target_zone.region.name }}"
    --set params.swift-tenant-domain="{{ cm_initial_cluster_data.cloud_config.credentials.os_project_domain_name }}"
  when: kube_cloud_provider == "openstack"
  ignore_errors: true

- name: Helm install galaxy-cvmfs-csi
  command: >
    /usr/local/bin/helm upgrade --install gxy-cvmfs galaxyproject/galaxy-cvmfs-csi
    --namespace csi-drivers
  ignore_errors: true
