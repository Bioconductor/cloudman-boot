- name: Decide on password
  set_fact:
    cluster_password: "{{ random_pwd }}"
    using_random_pwd: true
  when: cluster_password == ''

- debug:
    msg: "Using cluster pwd {{ cluster_password }}"
    verbosity: 2

- name: Compose random pwd access doc
  set_fact:
    svc_access_line: "Login to any of these services as user 'admin', using password '{{ cluster_password }}'"
  when: using_random_pwd is defined and using_random_pwd

- name: Compose supplied pwd access doc
  set_fact:
    svc_access_line: "Login to any of these services as user 'admin', using the password you supplied."
  when: using_random_pwd is not defined

- name: Make sure /etc/kubernetes dir exists
  file:
    path: /etc/kubernetes
    state: directory
  become: yes

- name: Create cloud config in /etc/kubernetes
  copy:
    content: "{{ kube_cloud_conf }}"
    dest: /etc/kubernetes/cloud-config
  become: yes
  when: kube_cloud_provider|bool

- name: Make sure rancher config dir /etc/rancher/rke2 exists
  file:
    path: /etc/rancher/rke2
    state: directory
  become: yes

- name: Create rke config file
  template:
    src: rke2_config.j2
    dest: /etc/rancher/rke2/config.yaml
  become: yes

- name: Install rke
  shell: >-
    curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION="{{ rke_version }}" INSTALL_RKE2_TYPE="server" sh -
  become: yes
  when: not rke_in_docker

- name: Make sure the RKE service is enabled
  shell: systemctl enable rke2-server.service
  become: yes

- name: Make sure RKE is restarted
  systemd:
    state: restarted
    name: rke2-server
  become: yes

# xref: https://github.com/rancher/k3s/issues/73
- name: Start rke in docker (only when running via cloudman-boot)
  docker_container:
      name: "rke"
      image: "{{ rke_container_image }}"
      command: server
      restart_policy: unless-stopped
      privileged: true
      volumes:
        - /etc/rancher:/etc/rancher
        - /var/lib/rancher/rke2:/var/lib/rancher/rke2:rshared
        - /var/lib/docker:/var/lib/docker:rshared
        - /var/run:/var/run
        - /run:/run
      network_mode: host
      pid_mode: host
      ipc_mode: host
  become: yes
  when: rke_in_docker

- name: Wait for rke to startup
  wait_for:
    path: /etc/rancher/rke2/rke2.yaml
    state: present
    timeout: 60

- name: Allow rke2 config to be read by current user
  file:
    path: /etc/rancher/rke2/rke2.yaml
    owner: "{{ ansible_effective_user_id }}"
    group: "{{ ansible_effective_group_id }}"
  become: yes

- name: Place crictl config file
  copy:
    src: crictl.yaml
    dest: /etc/crictl.yaml
  become: yes

- name: Check whether crictl exists
  shell: "which crictl"
  register: crictl_result
  ignore_errors: true

- name: Fetch and install crictl
  shell: >-
    curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/crictl-{{ crictl_version }}-linux-amd64.tar.gz --output crictl-{{ crictl_version }}-linux-amd64.tar.gz
    && sudo tar zxvf crictl-{{ crictl_version }}-linux-amd64.tar.gz -C /usr/local/bin
    && rm -f crictl-{{ crictl_version }}-linux-amd64.tar.gz
  when: crictl_result.rc != 0

- name: Make sure ~/.kube dir exists
  file:
    path: ~/.kube
    state: directory

- name: Symlink kube config
  file:
    src: /etc/rancher/rke2/rke2.yaml
    dest: ~/.kube/config
    state: link
    force: true

- name: Check whether kubectl exists
  shell: "which kubectl"
  register: kubectl_result
  ignore_errors: true

- name: Fetch and install kubectl
  shell: >-
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    && chmod +x ./kubectl
    && sudo mv ./kubectl /usr/local/bin/kubectl
  when: kubectl_result.rc != 0

#- name: Setup cloud controller secret
#  shell: kubectl create secret -n kube-system generic cloud-config --from-file=cloud.conf=/etc/kubernetes/cloud-config
#  ignore_errors: true
#  when: not kube_in_tree_provider and kube_cloud_provider
#
#- name: Install AWS Cloud Controller Manager
#  shell: kubectl apply -f {{ item }}
#  with_items:
#    - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/release-1.19/manifests/rbac.yaml
#    - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/release-1.19/manifests/aws-cloud-controller-manager-daemonset.yaml
#  when: not kube_in_tree_provider and kube_cloud_provider == "aws"
#
#- name: Install GCP Cloud Controller Manager
#  shell: kubectl apply -f {{ item }}
#  with_items:
#    - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/release-1.19/manifests/rbac.yaml
#    - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/release-1.19/manifests/aws-cloud-controller-manager-daemonset.yaml
#  when: not kube_in_tree_provider and kube_cloud_provider == "gce"
#
#- name: Install OpenStack Cloud Controller Manager
#  shell: kubectl apply -f {{ item }}
#  with_items:
#    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/cluster/addons/rbac/cloud-controller-manager-roles.yaml
#    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/cluster/addons/rbac/cloud-controller-manager-role-bindings.yaml
#    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/controller-manager/openstack-cloud-controller-manager-ds.yaml
#  when: not kube_in_tree_provider and kube_cloud_provider == "openstack"
#
#- name: Patch node-selector on AWS because of https://github.com/rancher/k3s/issues/1869
#  shell: |
#    kubectl patch daemonset -n kube-system aws-cloud-controller-manager -p '{"spec": {"template": {"spec": {"nodeSelector": {"node-role.kubernetes.io/master": "true"}}}}}'
#  ignore_errors: true
#  when: not kube_in_tree_provider and kube_cloud_provider == "aws"
#
#- name: Patch node-selector on OpenStack because of https://github.com/rancher/k3s/issues/1869
#  shell: |
#    kubectl patch daemonset -n kube-system openstack-cloud-controller-manager -p '{"spec": {"template": {"spec": {"nodeSelector": {"node-role.kubernetes.io/master": "true"}}}}}'
#  ignore_errors: true
#  when: not kube_in_tree_provider and kube_cloud_provider == "openstack"

# Special handling for AWS
# https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws#tagging-amazon-resources
# TODO: cluster id should be a unique value, instead of local
- name: Set aws instance tag
  script: set_aws_instance_tag.py local
  environment:
    CM_INITIAL_CLUSTER_DATA: "{{ cm_initial_cluster_data | to_yaml | b64encode }}"
  when: kube_cloud_provider == "aws"
