---
- name: Pull and run the Rancher/server container
  docker_container:
      name: "{{ rancher_name }}"
      image: rancher/server:{{ rancher_version }}
      restart_policy: unless-stopped
      ports:
        - 80:80
        - 443:443

- name: Get the host public IP address
  uri:
    url: https://ipinfo.io/ip
    return_content: yes
  register: p_ip

- name: Set public IP variable
  set_fact:
    public_ip: "{{ p_ip.content | trim }}"

- name: Setup login
  uri:
    url: "https://{{ public_ip }}:{{ rancher_port }}/v3-public/localProviders/local?action=login"
    method: POST
    body_format: json
    body:
      username: admin
      password: admin
    validate_certs: no
    status_code: 201
    return_content: yes
  ignore_errors: yes
  register: login_response
  until: login_response['status'] | default(0) == 201
  retries: 6
  delay: 10

- name: Set current admin password
  set_fact:
    rpwd: admin
    token: "{{ login_response.json.token }}"
  when: login_response is succeeded

- name: Re-setup login
  uri:
    url: "https://{{ public_ip }}:{{ rancher_port }}/v3-public/localProviders/local?action=login"
    method: POST
    body_format: json
    body:
      username: admin
      password: "{{ rancher_password }}"
    validate_certs: no
    status_code: 201
    return_content: yes
  register: login_response
  when: login_response is failed

- name: Set current admin password
  set_fact:
    rpwd: "{{ rancher_password }}"
    token: "{{ login_response.json.token }}"
  when: rpwd is undefined

- name: Change password
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/users?action=changepassword
    method: POST
    body_format: json
    body:
      currentPassword: "{{ rpwd }}"
      newPassword: "{{ rancher_password }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no

# Not used but left in case we need it one day
# - name: Create an API key
#   uri:
#     url: https://{{ public_ip }}:{{ rancher_port }}/v3/token
#     method: POST
#     body_format: json
#     body:
#       type: token
#       description: cloudman-boot ansible
#       ttl: 3600000  # Expires in 1 hour
#     headers:
#       Authorization: Bearer {{ token }}
#     validate_certs: no
#     status_code: 201
#   register: api_token

- name: Configure server URL
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/settings/server-url
    method: PUT
    body_format: json
    body:
      name: server-url
      value: "{{ public_ip }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no

- name: Check if cluster already exists
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/clusters?name={{ cm_cluster_name }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: clusters

- name: Store existing cluster id
  set_fact:
    cluster_id: "{{ clusters.json.data[0].id }}"
  when: clusters.json.data | length > 0

- name: Create a cluster
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/cluster
    method: POST
    body_format: json
    body:
      type: cluster
      rancherKubernetesEngineConfig:
        ignoreDockerVersion: false
        ingress:
          provider: nginx
          type: ingressConfig
      name: "{{ cm_cluster_name }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201
  register: cluster
  when: clusters.json.data | length == 0

- name: Store new cluster id
  set_fact:
    cluster_id: "{{ cluster.json.id }}"
  when: cluster is not skipped

- name: Generate cluster registration token and extract node command
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/clusterregistrationtoken
    method: POST
    body_format: json
    body:
      type: clusterRegistrationToken
      clusterId: "{{ cluster_id }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201
  register: node_command

- name: Edit node command
  set_fact:
    node_command: "{{ node_command.json.nodeCommand | replace('--server  ', '--server https://' ~ public_ip ~ ':' ~ rancher_port ~ ' ') }}"

- name: Get current cluster status
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/clusters/{{ cluster_id }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cluster_state1

- name: Add master as a node
  command: "{{ node_command }} --etcd --controlplane --worker"
  when: cluster_state1.json.state == "provisioning"

- name: Wait for the cluster to become active
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/clusters/{{ cluster_id }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cluster_state_dbg

- name: Wait for the cluster to become active
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/clusters/{{ cluster_id }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cluster_state2
  until: '"active" in cluster_state2.json.state'
  retries: 100
  delay: 15

- name: Make sure kube conf dir exist
  file:
    path: "{{ kube_dir }}"
    state: directory

- name: Download kubectl script
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
    dest: /usr/local/bin
    mode: 0755

- name: Get kubectl config
  uri:
    url: https://{{ public_ip }}:{{ rancher_port }}/v3/clusters/{{ cluster_id }}?action=generateKubeconfig
    method: POST
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ token }}
    validate_certs:
  register: kubectl_config

- name: Save kubectl config
  copy:
    content: "{{ kubectl_config.json.config }}"
    dest: "{{ kube_dir }}/config"

- name: Fetch Helm
  unarchive:
    src: https://storage.googleapis.com/kubernetes-helm/helm-{{ helm_version }}-linux-amd64.tar.gz
    dest: /tmp
    remote_src: True

- name: Place helm script
  copy:
    src: /tmp/linux-amd64/helm
    dest: /usr/local/bin
    mode: 0755
    remote_src: True

- name: Init Helm
  environment:
    KUBECONFIG: "{{ kube_dir }}/config"
  shell: helm init

# Not yet working
# - import_tasks: cloudman.yml

- name: Print Rancher's URL
  debug:
    msg: "You can connect to rancher server https://{{ public_ip }}:{{ rancher_port }}"
