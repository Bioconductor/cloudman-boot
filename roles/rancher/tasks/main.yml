---
- debug: msg="Using rancher pwd {{ rancher_password }}"

- name: Pull and run the Rancher/server container
  docker_container:
      name: "{{ rancher_name }}"
      image: rancher/server:{{ rancher_version }}
      restart_policy: unless-stopped
      ports:
        - "{{ rancher_port_80}}:80"
        - "{{ rancher_port }}:443"

- debug: msg="Using rancher_server address {{ rancher_server }}"

- name: Setup login
  uri:
    url: "https://{{ rancher_server }}:{{ rancher_port }}/v3-public/localProviders/local?action=login"
    method: POST
    body_format: json
    body:
      username: admin
      password: admin
    validate_certs: no
    status_code: 201
    return_content: yes
  ignore_errors: yes
  register: login_response
  until: login_response['status'] | default(0) == 201
  retries: 6
  delay: 10

- name: Set current admin password
  set_fact:
    rpwd: admin
    token: "{{ login_response.json.token }}"
  when: login_response is succeeded

- name: Re-setup login
  uri:
    url: "https://{{ rancher_server }}:{{ rancher_port }}/v3-public/localProviders/local?action=login"
    method: POST
    body_format: json
    body:
      username: admin
      password: "{{ rancher_password }}"
    validate_certs: no
    status_code: 201
    return_content: yes
  register: login_response
  when: login_response is failed

- name: Set current admin password
  set_fact:
    rpwd: "{{ rancher_password }}"
    token: "{{ login_response.json.token }}"
  when: rpwd is undefined

- name: Change password
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/users?action=changepassword
    method: POST
    body_format: json
    body:
      currentPassword: "{{ rpwd }}"
      newPassword: "{{ rancher_password }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no

# Not used but left in case we need it one day
# - name: Create an API key
#   uri:
#     url: https://{{ rancher_server }}:{{ rancher_port }}/v3/token
#     method: POST
#     body_format: json
#     body:
#       type: token
#       description: cloudman-boot ansible
#       ttl: 3600000  # Expires in 1 hour
#     headers:
#       Authorization: Bearer {{ token }}
#     validate_certs: no
#     status_code: 201
#   register: api_token

- name: Configure server URL
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/settings/server-url
    method: PUT
    body_format: json
    body:
      name: server-url
      type: setting
      value: "https://{{ rancher_server }}:{{ rancher_port }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no

- name: Check if cluster already exists
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/clusters?name={{ cm_cluster_name }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: clusters

- name: Store existing cluster id
  set_fact:
    cluster_id: "{{ clusters.json.data[0].id }}"
  when: clusters.json.data | length > 0

- name: Create a cluster
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/cluster
    method: POST
    body_format: json
    body:
      type: cluster
      rancherKubernetesEngineConfig:
        ignoreDockerVersion: true
        ingress:
          provider: nginx
          type: ingressConfig
      name: "{{ cm_cluster_name }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201
  register: cluster
  when: clusters.json.data | length == 0

- name: Store new cluster id
  set_fact:
    cluster_id: "{{ cluster.json.id }}"
  when: cluster is not skipped

- name: Generate cluster registration token and extract node command
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/clusterregistrationtoken
    method: POST
    body_format: json
    body:
      type: clusterRegistrationToken
      clusterId: "{{ cluster_id }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201
  register: node_command

- name: Extract node command
  set_fact:
    node_command: "{{ node_command.json.nodeCommand }}"

- name: Remove sudo from the node command
  set_fact:
    node_command: "{{ node_command | replace('sudo ', '') }}"

- debug: msg="Node cmd is {{ node_command }} {{ node_command }} {{ rancher_master_etcd }} {{ rancher_master_controlplane }} {{ rancher_master_as_worker }}"

- name: Get current cluster status
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/clusters/{{ cluster_id }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cluster_state1

- name: Add master as a node
  command: "{{ node_command }} {{ rancher_master_etcd }} {{ rancher_master_controlplane }} {{ rancher_master_as_worker }}"
  when: cluster_state1.json.state == "provisioning"

- name: Wait for the cluster to become active
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/clusters/{{ cluster_id }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cluster_state_dbg

- name: Wait for the cluster to become active
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/clusters/{{ cluster_id }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cluster_state2
  until: '"active" in cluster_state2.json.state'
  retries: 100
  delay: 15

- name: Add a persistent volume
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port}}/v3/clusters/{{ cluster_id }}/persistentvolume
    method: POST
    body_format: json
    body:
      type: persistentVolume
      name: cloudman-volume
      capacity:
        storage: 10Gi
      hostPath:
        type: hostPathVolumeSource
        path: /cloudman_volume
        kind: DirectoryOrCreate
      accessModes:
        - ReadWriteOnce
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201

- name: Check if cloudman app is in the catalog already
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/catalogs?name={{ cm_helm_app_name }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cm_helm_app

- name: Disable the default library catalog
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/catalogs/library
    method: DELETE
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no

- name: Add custom Helm repos to the Rancher catalog
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/catalog
    method: POST
    body_format: json
    body:
      branch: master
      kind: helm
      name: "{{ item.app_name }}"
      type: catalog
      url: "{{ item.app_url }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201
  when: cm_helm_app.json.data | length == 0
  with_items:
    - { app_name: "{{ cm_helm_app_name }}", app_url: 'https://github.com/CloudVE/cloudman-helm.git' }
    - { app_name: galaxy-helm, app_url: 'https://github.com/galaxyproject/galaxy-kubernetes.git' }

- name: Get project info
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/projects?clusterId={{ cluster_id }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: project

- name: Set project id
  set_fact:
    project_id: "{{ project.json.data[0].id }}"

- name: Check if namespace already exists
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/cluster/{{ cluster_id }}/namespaces?name={{ cm_namespace_name }}
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cm_ns

- name: Add CloudMan namespace
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/clusters/{{ cluster_id }}/namespace
    method: POST
    body_format: json
    body:
      name: "{{ cm_namespace_name }}"
      type: namespace
      projectId: "{{ project_id }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201
  when: cm_ns.json.data | length == 0

- name: Check if CloudMan app has been added
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/project/{{ project_id }}/apps?name=cloudman
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
  register: cm_app

- name: Launch CloudMan app
  uri:
    url: https://{{ rancher_server }}:{{ rancher_port }}/v3/projects/{{ project_id }}/app
    method: POST
    body_format: json
    body:
      name: cloudman
      targetNamespace: "{{ cm_namespace_name }}"
      type: app
      prune: false
      projectId: "{{ project_id }}"
      externalId: "catalog://?catalog={{ cm_helm_app_name }}&template=cloudman&version={{ cm_helm_version }}"
      answers:
        RANCHER_API_KEY: "{{ token }}"
        RANCHER_NODE_COMMAND: "{{ node_command }} --worker"
        CM_BOOTSTRAP_DATA: "{{ cm_bootstrap_data|default('') }}"
    headers:
      Authorization: Bearer {{ token }}
    validate_certs: no
    status_code: 201
  when: cm_app.json.data | length == 0

- name: Print Rancher's URL
  debug:
    msg: "You can connect to rancher server https://{{ rancher_server }}:{{ rancher_port }}"
